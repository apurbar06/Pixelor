        -:    0:Source:/usr/include/c++/6/ext/new_allocator.h
        -:    0:Graph:Histogram.gcno
        -:    0:Data:Histogram.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2016 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  using std::size_t;
        -:   45:  using std::ptrdiff_t;
        -:   46:
        -:   47:  /**
        -:   48:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   49:   *  @ingroup allocators
        -:   50:   *
        -:   51:   *  This is precisely the allocator defined in the C++ Standard. 
        -:   52:   *    - all allocation calls operator new
        -:   53:   *    - all deallocation calls operator delete
        -:   54:   *
        -:   55:   *  @tparam  _Tp  Type of allocated object.
        -:   56:   */
        -:   57:  template<typename _Tp>
        -:   58:    class new_allocator
        -:   59:    {
        -:   60:    public:
        -:   61:      typedef size_t     size_type;
        -:   62:      typedef ptrdiff_t  difference_type;
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:      typedef _Tp        value_type;
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:        struct rebind
        -:   71:        { typedef new_allocator<_Tp1> other; };
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIjEC2Ev called 64 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIN2sf5ColorEEC2Ev called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEEC2Ev called 1 returned 100% blocks executed 100%
       66:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        -:   80:
        -:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
        -:   82:
        -:   83:      template<typename _Tp1>
        -:   84:        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   85:
function _ZN9__gnu_cxx13new_allocatorIjED2Ev called 64 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIN2sf5ColorEED2Ev called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED2Ev called 1 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEED2Ev called 1 returned 100% blocks executed 100%
       66:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        -:   87:
        -:   88:      pointer
        -:   89:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   90:      { return std::__addressof(__x); }
        -:   91:
        -:   92:      const_pointer
        -:   93:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   94:      { return std::__addressof(__x); }
        -:   95:
        -:   96:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:   97:      // about what the return value is when __n == 0.
        -:   98:      pointer
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEmPKv called 474 returned 100% blocks executed 83%
function _ZN9__gnu_cxx13new_allocatorIjE8allocateEmPKv called 192 returned 100% blocks executed 83%
function _ZN9__gnu_cxx13new_allocatorIN2sf5ColorEE8allocateEmPKv called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE8allocateEmPKv called 474 returned 100% blocks executed 83%
     1140:   99:      allocate(size_type __n, const void* = 0)
        -:  100:      { 
     1140:  101:	if (__n > this->max_size())
call    0 returned 474
branch  1 taken 0 (fallthrough)
branch  2 taken 474
call    3 returned 192
branch  4 taken 0 (fallthrough)
branch  5 taken 192
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 returned 474
branch 10 taken 0 (fallthrough)
branch 11 taken 474
    #####:  102:	  std::__throw_bad_alloc();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  103:
     1140:  104:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
call    0 returned 474
call    1 returned 192
call    2 never executed
call    3 returned 474
        -:  105:      }
        -:  106:
        -:  107:      // __p is not permitted to be a null pointer.
        -:  108:      void
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSB_m called 474 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE10deallocateEPSB_m called 474 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjm called 192 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIN2sf5ColorEE10deallocateEPS2_m called 0 returned 0% blocks executed 0%
     1140:  109:      deallocate(pointer __p, size_type)
     1140:  110:      { ::operator delete(__p); }
call    0 returned 474
call    1 returned 474
call    2 returned 192
call    3 never executed
        -:  111:
        -:  112:      size_type
function _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8max_sizeEv called 474 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv called 576 returned 100% blocks executed 100%
function _ZNK9__gnu_cxx13new_allocatorIN2sf5ColorEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE8max_sizeEv called 474 returned 100% blocks executed 100%
     1524:  113:      max_size() const _GLIBCXX_USE_NOEXCEPT
     1524:  114:      { return size_t(-1) / sizeof(_Tp); }
        -:  115:
        -:  116:#if __cplusplus >= 201103L
        -:  117:      template<typename _Up, typename... _Args>
        -:  118:        void
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISA_JSA_EEEvPT_DpOT0_ called 474 returned 100% blocks executed 86%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE9constructISA_JS2_IS8_mEEEEvPT_DpOT0_ called 474 returned 100% blocks executed 86%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESH_IJEEEEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorIjE9constructIjJjEEEvPT_DpOT0_ called 192 returned 100% blocks executed 83%
function _ZN9__gnu_cxx13new_allocatorIN2sf5ColorEE9constructIS2_JS2_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
     1140:  119:        construct(_Up* __p, _Args&&... __args)
     1140:  120:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
call    0 returned 474
call    1 returned 474
branch  2 taken 474 (fallthrough)
branch  3 taken 0
call    4 returned 474
call    5 returned 474
call    6 returned 474
branch  7 taken 474 (fallthrough)
branch  8 taken 0
call    9 returned 474
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 returned 192
call   22 returned 192
branch 23 taken 192 (fallthrough)
branch 24 taken 0
call   25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
        -:  121:
        -:  122:      template<typename _Up>
        -:  123:        void 
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISA_EEvPT_ called 474 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE7destroyISA_EEvPT_ called 474 returned 100% blocks executed 100%
function _ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_ called 0 returned 0% blocks executed 0%
function _ZN9__gnu_cxx13new_allocatorIN2sf5ColorEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
      948:  124:        destroy(_Up* __p) { __p->~_Up(); }
call    0 returned 474
call    1 returned 474
        -:  125:#else
        -:  126:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  127:      // 402. wrong new expression in [some_] allocator::construct
        -:  128:      void 
        -:  129:      construct(pointer __p, const _Tp& __val) 
        -:  130:      { ::new((void *)__p) _Tp(__val); }
        -:  131:
        -:  132:      void 
        -:  133:      destroy(pointer __p) { __p->~_Tp(); }
        -:  134:#endif
        -:  135:    };
        -:  136:
        -:  137:  template<typename _Tp>
        -:  138:    inline bool
        -:  139:    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  140:    { return true; }
        -:  141:  
        -:  142:  template<typename _Tp>
        -:  143:    inline bool
        -:  144:    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  145:    { return false; }
        -:  146:
        -:  147:_GLIBCXX_END_NAMESPACE_VERSION
        -:  148:} // namespace
        -:  149:
        -:  150:#endif
